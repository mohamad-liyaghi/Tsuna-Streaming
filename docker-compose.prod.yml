version: '3.9'

x-environment: &COMMON_VARS
    DJANGO_SETTINGS_MODULE: 'config.settings.production'
    ENVIRONMENT: PRODUCTION

services:

  backend:
    container_name: tsuna-streaming-backend
    command: sh ./docker/commands/setup.sh
    restart: on-failure
    image: ml06py/tsuna_streaming
    env_file:
      - backend/.env.prod
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/backend
      - ./backend/.env.prod:/backend/.env
    environment:
      *COMMON_VARS
    depends_on:
      postgres: 
        condition: service_healthy
      redis:
        condition: service_started
      smtp4dev:
        condition: service_started

  postgres:
    image: postgres:11
    container_name: tsuna-streaming-database
    restart: on-failure
    env_file:
      - backend/.env.prod
    expose:
      - "5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 2s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: tsuna-streaming-pgadmin
    restart: on-failure
    env_file:
      - backend/.env.prod
    ports:
      - "5050:80"
    volumes:
      - /data/pgadmin:/var/lib/pgadmin/data

  redis:
    image: redis:6.2-alpine
    container_name: tsuna-streaming-redis
    restart: always
    expose:
      - "6379"
    volumes:
      - redis-data:/data

  smtp4dev:
    image: rnwood/smtp4dev:v3
    container_name: tsuna-streaming-smtp4dev
    ports:
      - "5000:80"
    expose:
      - "80"
    restart: always

  celery:
    container_name: tsuna-streaming-celery
    command: sh ./docker/commands/celery.sh
    image: ml06py/tsuna_streaming
    volumes:
      - ./backend:/backend
    env_file:
      - backend/.env.prod
    environment:
      *COMMON_VARS
    depends_on:
      - backend

  celery-beat:
    image: ml06py/tsuna_streaming
    container_name: tsuna-streaming-celery-beat
    command: sh ./docker/commands/celery-beat.sh
    volumes:
      - ./backend:/backend
    env_file:
        - backend/.env.prod
    environment:
      *COMMON_VARS
    depends_on:
      - backend

  flower:
    container_name: tsuna-streaming-flower
    image: ml06py/tsuna_streaming
    command: sh ./docker/commands/flower.sh
    env_file:
      - backend/.env.prod
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/backend
    environment:
      *COMMON_VARS
    depends_on:
      - backend

  prometheus:
    image: prom/prometheus
    container_name: tsuna-streaming-prometheus
    volumes:
      - ./prometheus/config.yaml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    depends_on:
      - backend
    networks:
      - main

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: tsuna-streaming-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - main


  # frontend:
  #   extends:
  #     file: frontend/docker-compose.yml
  #     service: frontend

volumes:
  postgres-data:
  redis-data: